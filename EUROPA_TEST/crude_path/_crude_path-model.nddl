#include "Plasma.nddl"


class UAV;
class Navigator;
class Node;
class Databank;
class DatabankStatus;
class data;


class UAV {

	Navigator navigator;

	UAV()
	{
		navigator = new Navigator();
	}

	action GoToNode
	{
		Node destination;
	}

	action CollectDataAtNode
	{
		Data data;
	}

	predicate collectedData 
	{
		Data data;
	}

}

class Navigator
	extends Timeline
{

	predicate AtNode {
		Node at_node;
	}

	predicate GoingToNode
	{
		Node from;
		Node to;
	}

/*
	predicate AtMeeting
	{
		UAV at_uav;
	}
*/
}

class Node
{
	float x,y,z;
	bool isBase;

	Databank databank;

	Node(float _x, float _y, float _z, bool _isBase, string _data);
	{
		x = _x;
		y = _y;
		z = _z;

		isBase = _isBase;
		databank = new Databank(_data);
	}

	Node(float _x, float _y, float _z, bool _isBase, Data _data);
	{
		x = _x;
		y = _y;
		z = _z;

		isBase = _isBase;
		databank = new Databank(_data.name);
		
	}
}

class Databank
{
	DatabankStatus status;
	string dataName;

	predicate hasData
	{
		Data data;
	}

	Databank(string _data)
	{
		status = new DatabankStatus();
		dataName = _data;
	}
}

class DatabankStatus
	extends Timeline
{
	predicate hasData {}
	predicate empty {}
}

class Data
{
	string name;

	Data(string _name)
	{
		name = _name;
	}
}


UAV::GoToNode
{
	eq(5, duration);

	met_by(condition object.navigator.AtNode _from);
	meets(effect object.navigator.AtNode _to);
	eq(_to.at_node, destination);

	equals(effect object.navigator.GoingToNode going);
	eq(going.from, _from);
	eq(going.to, _to);

}

UAV::CollectDataAtNode
{
	Node dataNode;

	eq(data.name, dataNode.dataName);

	contained_by(condition object.Navigator.AtNode currentNode);
	eq(currentNode.at_node dataNode);

	starts(effect collectedData collect);
	eq(collect.data, data);

}




/**
 * @brief A simple rule to force a repeated cycle
 */
YourObject::helloWorld{
 eq(duration, 10);
 meets (object.helloWorld);
 met_by(object.helloWorld);
}
